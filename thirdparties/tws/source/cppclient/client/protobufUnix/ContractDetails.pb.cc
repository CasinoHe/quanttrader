// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ContractDetails.proto
// Protobuf C++ Version: 5.29.1

#include "ContractDetails.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protobuf {
              template <typename>
PROTOBUF_CONSTEXPR ContractDetails_SecIdListEntry_DoNotUse::ContractDetails_SecIdListEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ContractDetails_SecIdListEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ContractDetails_SecIdListEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ContractDetails_SecIdListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractDetails_SecIdListEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractDetails_SecIdListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ContractDetails_SecIdListEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractDetails_SecIdListEntry_DoNotUseDefaultTypeInternal _ContractDetails_SecIdListEntry_DoNotUse_default_instance_;

inline constexpr ContractDetails::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        secidlist_{},
        ineligibilityreasonlist_{},
        marketname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mintick_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ordertypes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        validexchanges_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        longname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        contractmonth_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        industry_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        category_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        subcategory_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timezoneid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tradinghours_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        liquidhours_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        evrule_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        undersymbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        undersectype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        marketruleids_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        realexpirationdate_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stocktype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        minsize_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sizeincrement_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        suggestedsizeincrement_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundfamily_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundtype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundfrontload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundbackload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundbackloadtimeinterval_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundmanagementfee_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundnotifyamount_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundminimuminitialpurchase_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundminimumsubsequentpurchase_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundblueskystates_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundblueskyterritories_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        funddistributionpolicyindicator_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fundassettype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cusip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issuedate_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ratings_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bondtype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        coupontype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        descappend_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nextoptiondate_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nextoptiontype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bondnotes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pricemagnifier_{0},
        underconid_{0},
        evmultiplier_{0},
        agggroup_{0},
        fundclosed_{false},
        fundclosedfornewinvestors_{false},
        fundclosedfornewmoney_{false},
        convertible_{false},
        coupon_{0},
        callable_{false},
        puttable_{false},
        nextoptionpartial_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ContractDetails::ContractDetails(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ContractDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractDetailsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractDetailsDefaultTypeInternal() {}
  union {
    ContractDetails _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractDetailsDefaultTypeInternal _ContractDetails_default_instance_;
}  // namespace protobuf
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ContractDetails_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ContractDetails_2eproto = nullptr;
const ::uint32_t
    TableStruct_ContractDetails_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails_SecIdListEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails_SecIdListEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails_SecIdListEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails_SecIdListEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.marketname_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.mintick_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.ordertypes_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.validexchanges_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.pricemagnifier_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.underconid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.longname_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.contractmonth_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.industry_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.category_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.subcategory_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.timezoneid_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.tradinghours_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.liquidhours_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.evrule_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.evmultiplier_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.secidlist_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.agggroup_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.undersymbol_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.undersectype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.marketruleids_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.realexpirationdate_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.stocktype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.minsize_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.sizeincrement_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.suggestedsizeincrement_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundname_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundfamily_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundtype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundfrontload_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundbackload_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundbackloadtimeinterval_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundmanagementfee_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundclosed_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundclosedfornewinvestors_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundclosedfornewmoney_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundnotifyamount_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundminimuminitialpurchase_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundminimumsubsequentpurchase_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundblueskystates_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundblueskyterritories_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.funddistributionpolicyindicator_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.fundassettype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.cusip_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.issuedate_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.ratings_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.bondtype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.coupon_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.coupontype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.convertible_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.callable_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.puttable_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.descappend_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.nextoptiondate_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.nextoptiontype_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.nextoptionpartial_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.bondnotes_),
        PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _impl_.ineligibilityreasonlist_),
        0,
        1,
        2,
        3,
        44,
        45,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        46,
        ~0u,
        47,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        48,
        49,
        50,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        52,
        39,
        51,
        53,
        54,
        40,
        41,
        42,
        55,
        43,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::protobuf::ContractDetails_SecIdListEntry_DoNotUse)},
        {12, 78, -1, sizeof(::protobuf::ContractDetails)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf::_ContractDetails_SecIdListEntry_DoNotUse_default_instance_._instance,
    &::protobuf::_ContractDetails_default_instance_._instance,
};
const char descriptor_table_protodef_ContractDetails_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025ContractDetails.proto\022\010protobuf\032\031Ineli"
    "gibilityReason.proto\"\266\025\n\017ContractDetails"
    "\022\027\n\nmarketName\030\001 \001(\tH\000\210\001\001\022\024\n\007minTick\030\002 \001"
    "(\tH\001\210\001\001\022\027\n\norderTypes\030\003 \001(\tH\002\210\001\001\022\033\n\016vali"
    "dExchanges\030\004 \001(\tH\003\210\001\001\022\033\n\016priceMagnifier\030"
    "\005 \001(\005H\004\210\001\001\022\027\n\nunderConId\030\006 \001(\005H\005\210\001\001\022\025\n\010l"
    "ongName\030\007 \001(\tH\006\210\001\001\022\032\n\rcontractMonth\030\010 \001("
    "\tH\007\210\001\001\022\025\n\010industry\030\t \001(\tH\010\210\001\001\022\025\n\010categor"
    "y\030\n \001(\tH\t\210\001\001\022\030\n\013subcategory\030\013 \001(\tH\n\210\001\001\022\027"
    "\n\ntimeZoneId\030\014 \001(\tH\013\210\001\001\022\031\n\014tradingHours\030"
    "\r \001(\tH\014\210\001\001\022\030\n\013liquidHours\030\016 \001(\tH\r\210\001\001\022\023\n\006"
    "evRule\030\017 \001(\tH\016\210\001\001\022\031\n\014evMultiplier\030\020 \001(\001H"
    "\017\210\001\001\022;\n\tsecIdList\030\021 \003(\0132(.protobuf.Contr"
    "actDetails.SecIdListEntry\022\025\n\010aggGroup\030\022 "
    "\001(\005H\020\210\001\001\022\030\n\013underSymbol\030\023 \001(\tH\021\210\001\001\022\031\n\014un"
    "derSecType\030\024 \001(\tH\022\210\001\001\022\032\n\rmarketRuleIds\030\025"
    " \001(\tH\023\210\001\001\022\037\n\022realExpirationDate\030\026 \001(\tH\024\210"
    "\001\001\022\026\n\tstockType\030\027 \001(\tH\025\210\001\001\022\024\n\007minSize\030\030 "
    "\001(\tH\026\210\001\001\022\032\n\rsizeIncrement\030\031 \001(\tH\027\210\001\001\022#\n\026"
    "suggestedSizeIncrement\030\032 \001(\tH\030\210\001\001\022\025\n\010fun"
    "dName\030\033 \001(\tH\031\210\001\001\022\027\n\nfundFamily\030\034 \001(\tH\032\210\001"
    "\001\022\025\n\010fundType\030\035 \001(\tH\033\210\001\001\022\032\n\rfundFrontLoa"
    "d\030\036 \001(\tH\034\210\001\001\022\031\n\014fundBackLoad\030\037 \001(\tH\035\210\001\001\022"
    "%\n\030fundBackLoadTimeInterval\030  \001(\tH\036\210\001\001\022\036"
    "\n\021fundManagementFee\030! \001(\tH\037\210\001\001\022\027\n\nfundCl"
    "osed\030\" \001(\010H \210\001\001\022&\n\031fundClosedForNewInves"
    "tors\030# \001(\010H!\210\001\001\022\"\n\025fundClosedForNewMoney"
    "\030$ \001(\010H\"\210\001\001\022\035\n\020fundNotifyAmount\030% \001(\tH#\210"
    "\001\001\022\'\n\032fundMinimumInitialPurchase\030& \001(\tH$"
    "\210\001\001\022*\n\035fundMinimumSubsequentPurchase\030\' \001"
    "(\tH%\210\001\001\022\036\n\021fundBlueSkyStates\030( \001(\tH&\210\001\001\022"
    "#\n\026fundBlueSkyTerritories\030) \001(\tH\'\210\001\001\022,\n\037"
    "fundDistributionPolicyIndicator\030* \001(\tH(\210"
    "\001\001\022\032\n\rfundAssetType\030+ \001(\tH)\210\001\001\022\022\n\005cusip\030"
    ", \001(\tH*\210\001\001\022\026\n\tissueDate\030- \001(\tH+\210\001\001\022\024\n\007ra"
    "tings\030. \001(\tH,\210\001\001\022\025\n\010bondType\030/ \001(\tH-\210\001\001\022"
    "\023\n\006coupon\0300 \001(\001H.\210\001\001\022\027\n\ncouponType\0301 \001(\t"
    "H/\210\001\001\022\030\n\013convertible\0302 \001(\010H0\210\001\001\022\025\n\010calla"
    "ble\0303 \001(\010H1\210\001\001\022\025\n\010puttable\0304 \001(\010H2\210\001\001\022\027\n"
    "\ndescAppend\0305 \001(\tH3\210\001\001\022\033\n\016nextOptionDate"
    "\0306 \001(\tH4\210\001\001\022\033\n\016nextOptionType\0307 \001(\tH5\210\001\001"
    "\022\036\n\021nextOptionPartial\0308 \001(\010H6\210\001\001\022\026\n\tbond"
    "Notes\0309 \001(\tH7\210\001\001\022>\n\027ineligibilityReasonL"
    "ist\030: \003(\0132\035.protobuf.IneligibilityReason"
    "\0320\n\016SecIdListEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
    "\030\002 \001(\t:\0028\001B\r\n\013_marketNameB\n\n\010_minTickB\r\n"
    "\013_orderTypesB\021\n\017_validExchangesB\021\n\017_pric"
    "eMagnifierB\r\n\013_underConIdB\013\n\t_longNameB\020"
    "\n\016_contractMonthB\013\n\t_industryB\013\n\t_catego"
    "ryB\016\n\014_subcategoryB\r\n\013_timeZoneIdB\017\n\r_tr"
    "adingHoursB\016\n\014_liquidHoursB\t\n\007_evRuleB\017\n"
    "\r_evMultiplierB\013\n\t_aggGroupB\016\n\014_underSym"
    "bolB\017\n\r_underSecTypeB\020\n\016_marketRuleIdsB\025"
    "\n\023_realExpirationDateB\014\n\n_stockTypeB\n\n\010_"
    "minSizeB\020\n\016_sizeIncrementB\031\n\027_suggestedS"
    "izeIncrementB\013\n\t_fundNameB\r\n\013_fundFamily"
    "B\013\n\t_fundTypeB\020\n\016_fundFrontLoadB\017\n\r_fund"
    "BackLoadB\033\n\031_fundBackLoadTimeIntervalB\024\n"
    "\022_fundManagementFeeB\r\n\013_fundClosedB\034\n\032_f"
    "undClosedForNewInvestorsB\030\n\026_fundClosedF"
    "orNewMoneyB\023\n\021_fundNotifyAmountB\035\n\033_fund"
    "MinimumInitialPurchaseB \n\036_fundMinimumSu"
    "bsequentPurchaseB\024\n\022_fundBlueSkyStatesB\031"
    "\n\027_fundBlueSkyTerritoriesB\"\n _fundDistri"
    "butionPolicyIndicatorB\020\n\016_fundAssetTypeB"
    "\010\n\006_cusipB\014\n\n_issueDateB\n\n\010_ratingsB\013\n\t_"
    "bondTypeB\t\n\007_couponB\r\n\013_couponTypeB\016\n\014_c"
    "onvertibleB\013\n\t_callableB\013\n\t_puttableB\r\n\013"
    "_descAppendB\021\n\017_nextOptionDateB\021\n\017_nextO"
    "ptionTypeB\024\n\022_nextOptionPartialB\014\n\n_bond"
    "NotesB\?\n\026com.ib.client.protobufB\024Contrac"
    "tDetailsProto\252\002\016IBApi.protobufb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ContractDetails_2eproto_deps[1] =
    {
        &::descriptor_table_IneligibilityReason_2eproto,
};
static ::absl::once_flag descriptor_table_ContractDetails_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ContractDetails_2eproto = {
    false,
    false,
    2878,
    descriptor_table_protodef_ContractDetails_2eproto,
    "ContractDetails.proto",
    &descriptor_table_ContractDetails_2eproto_once,
    descriptor_table_ContractDetails_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_ContractDetails_2eproto::offsets,
    file_level_enum_descriptors_ContractDetails_2eproto,
    file_level_service_descriptors_ContractDetails_2eproto,
};
namespace protobuf {
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              ContractDetails_SecIdListEntry_DoNotUse::ContractDetails_SecIdListEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              ContractDetails_SecIdListEntry_DoNotUse::ContractDetails_SecIdListEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              ContractDetails_SecIdListEntry_DoNotUse::ContractDetails_SecIdListEntry_DoNotUse() : SuperType() {}
              ContractDetails_SecIdListEntry_DoNotUse::ContractDetails_SecIdListEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* ContractDetails_SecIdListEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) ContractDetails_SecIdListEntry_DoNotUse(arena);
              }
              constexpr auto ContractDetails_SecIdListEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ContractDetails_SecIdListEntry_DoNotUse),
                                                          alignof(ContractDetails_SecIdListEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull ContractDetails_SecIdListEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_ContractDetails_SecIdListEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &ContractDetails_SecIdListEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<ContractDetails_SecIdListEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &ContractDetails_SecIdListEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &ContractDetails_SecIdListEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(ContractDetails_SecIdListEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &ContractDetails_SecIdListEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_ContractDetails_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* ContractDetails_SecIdListEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 56, 2> ContractDetails_SecIdListEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ContractDetails_SecIdListEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf::ContractDetails_SecIdListEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ContractDetails_SecIdListEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ContractDetails_SecIdListEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ContractDetails_SecIdListEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(ContractDetails_SecIdListEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\47\3\5\0\0\0\0\0"
    "protobuf.ContractDetails.SecIdListEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class ContractDetails::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ContractDetails>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_._has_bits_);
};

void ContractDetails::clear_ineligibilityreasonlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ineligibilityreasonlist_.Clear();
}
ContractDetails::ContractDetails(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.ContractDetails)
}
inline PROTOBUF_NDEBUG_INLINE ContractDetails::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf::ContractDetails& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        secidlist_{visibility, arena, from.secidlist_},
        ineligibilityreasonlist_{visibility, arena, from.ineligibilityreasonlist_},
        marketname_(arena, from.marketname_),
        mintick_(arena, from.mintick_),
        ordertypes_(arena, from.ordertypes_),
        validexchanges_(arena, from.validexchanges_),
        longname_(arena, from.longname_),
        contractmonth_(arena, from.contractmonth_),
        industry_(arena, from.industry_),
        category_(arena, from.category_),
        subcategory_(arena, from.subcategory_),
        timezoneid_(arena, from.timezoneid_),
        tradinghours_(arena, from.tradinghours_),
        liquidhours_(arena, from.liquidhours_),
        evrule_(arena, from.evrule_),
        undersymbol_(arena, from.undersymbol_),
        undersectype_(arena, from.undersectype_),
        marketruleids_(arena, from.marketruleids_),
        realexpirationdate_(arena, from.realexpirationdate_),
        stocktype_(arena, from.stocktype_),
        minsize_(arena, from.minsize_),
        sizeincrement_(arena, from.sizeincrement_),
        suggestedsizeincrement_(arena, from.suggestedsizeincrement_),
        fundname_(arena, from.fundname_),
        fundfamily_(arena, from.fundfamily_),
        fundtype_(arena, from.fundtype_),
        fundfrontload_(arena, from.fundfrontload_),
        fundbackload_(arena, from.fundbackload_),
        fundbackloadtimeinterval_(arena, from.fundbackloadtimeinterval_),
        fundmanagementfee_(arena, from.fundmanagementfee_),
        fundnotifyamount_(arena, from.fundnotifyamount_),
        fundminimuminitialpurchase_(arena, from.fundminimuminitialpurchase_),
        fundminimumsubsequentpurchase_(arena, from.fundminimumsubsequentpurchase_),
        fundblueskystates_(arena, from.fundblueskystates_),
        fundblueskyterritories_(arena, from.fundblueskyterritories_),
        funddistributionpolicyindicator_(arena, from.funddistributionpolicyindicator_),
        fundassettype_(arena, from.fundassettype_),
        cusip_(arena, from.cusip_),
        issuedate_(arena, from.issuedate_),
        ratings_(arena, from.ratings_),
        bondtype_(arena, from.bondtype_),
        coupontype_(arena, from.coupontype_),
        descappend_(arena, from.descappend_),
        nextoptiondate_(arena, from.nextoptiondate_),
        nextoptiontype_(arena, from.nextoptiontype_),
        bondnotes_(arena, from.bondnotes_) {}

ContractDetails::ContractDetails(
    ::google::protobuf::Arena* arena,
    const ContractDetails& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ContractDetails* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pricemagnifier_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pricemagnifier_),
           offsetof(Impl_, nextoptionpartial_) -
               offsetof(Impl_, pricemagnifier_) +
               sizeof(Impl_::nextoptionpartial_));

  // @@protoc_insertion_point(copy_constructor:protobuf.ContractDetails)
}
inline PROTOBUF_NDEBUG_INLINE ContractDetails::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        secidlist_{visibility, arena},
        ineligibilityreasonlist_{visibility, arena},
        marketname_(arena),
        mintick_(arena),
        ordertypes_(arena),
        validexchanges_(arena),
        longname_(arena),
        contractmonth_(arena),
        industry_(arena),
        category_(arena),
        subcategory_(arena),
        timezoneid_(arena),
        tradinghours_(arena),
        liquidhours_(arena),
        evrule_(arena),
        undersymbol_(arena),
        undersectype_(arena),
        marketruleids_(arena),
        realexpirationdate_(arena),
        stocktype_(arena),
        minsize_(arena),
        sizeincrement_(arena),
        suggestedsizeincrement_(arena),
        fundname_(arena),
        fundfamily_(arena),
        fundtype_(arena),
        fundfrontload_(arena),
        fundbackload_(arena),
        fundbackloadtimeinterval_(arena),
        fundmanagementfee_(arena),
        fundnotifyamount_(arena),
        fundminimuminitialpurchase_(arena),
        fundminimumsubsequentpurchase_(arena),
        fundblueskystates_(arena),
        fundblueskyterritories_(arena),
        funddistributionpolicyindicator_(arena),
        fundassettype_(arena),
        cusip_(arena),
        issuedate_(arena),
        ratings_(arena),
        bondtype_(arena),
        coupontype_(arena),
        descappend_(arena),
        nextoptiondate_(arena),
        nextoptiontype_(arena),
        bondnotes_(arena) {}

inline void ContractDetails::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pricemagnifier_),
           0,
           offsetof(Impl_, nextoptionpartial_) -
               offsetof(Impl_, pricemagnifier_) +
               sizeof(Impl_::nextoptionpartial_));
}
ContractDetails::~ContractDetails() {
  // @@protoc_insertion_point(destructor:protobuf.ContractDetails)
  SharedDtor(*this);
}
inline void ContractDetails::SharedDtor(MessageLite& self) {
  ContractDetails& this_ = static_cast<ContractDetails&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.marketname_.Destroy();
  this_._impl_.mintick_.Destroy();
  this_._impl_.ordertypes_.Destroy();
  this_._impl_.validexchanges_.Destroy();
  this_._impl_.longname_.Destroy();
  this_._impl_.contractmonth_.Destroy();
  this_._impl_.industry_.Destroy();
  this_._impl_.category_.Destroy();
  this_._impl_.subcategory_.Destroy();
  this_._impl_.timezoneid_.Destroy();
  this_._impl_.tradinghours_.Destroy();
  this_._impl_.liquidhours_.Destroy();
  this_._impl_.evrule_.Destroy();
  this_._impl_.undersymbol_.Destroy();
  this_._impl_.undersectype_.Destroy();
  this_._impl_.marketruleids_.Destroy();
  this_._impl_.realexpirationdate_.Destroy();
  this_._impl_.stocktype_.Destroy();
  this_._impl_.minsize_.Destroy();
  this_._impl_.sizeincrement_.Destroy();
  this_._impl_.suggestedsizeincrement_.Destroy();
  this_._impl_.fundname_.Destroy();
  this_._impl_.fundfamily_.Destroy();
  this_._impl_.fundtype_.Destroy();
  this_._impl_.fundfrontload_.Destroy();
  this_._impl_.fundbackload_.Destroy();
  this_._impl_.fundbackloadtimeinterval_.Destroy();
  this_._impl_.fundmanagementfee_.Destroy();
  this_._impl_.fundnotifyamount_.Destroy();
  this_._impl_.fundminimuminitialpurchase_.Destroy();
  this_._impl_.fundminimumsubsequentpurchase_.Destroy();
  this_._impl_.fundblueskystates_.Destroy();
  this_._impl_.fundblueskyterritories_.Destroy();
  this_._impl_.funddistributionpolicyindicator_.Destroy();
  this_._impl_.fundassettype_.Destroy();
  this_._impl_.cusip_.Destroy();
  this_._impl_.issuedate_.Destroy();
  this_._impl_.ratings_.Destroy();
  this_._impl_.bondtype_.Destroy();
  this_._impl_.coupontype_.Destroy();
  this_._impl_.descappend_.Destroy();
  this_._impl_.nextoptiondate_.Destroy();
  this_._impl_.nextoptiontype_.Destroy();
  this_._impl_.bondnotes_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ContractDetails::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ContractDetails(arena);
}
constexpr auto ContractDetails::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.secidlist_) +
          decltype(ContractDetails::_impl_.secidlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.secidlist_) +
          decltype(ContractDetails::_impl_.secidlist_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.ineligibilityreasonlist_) +
          decltype(ContractDetails::_impl_.ineligibilityreasonlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ContractDetails), alignof(ContractDetails), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ContractDetails::PlacementNew_,
                                 sizeof(ContractDetails),
                                 alignof(ContractDetails));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ContractDetails::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ContractDetails_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ContractDetails::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ContractDetails>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ContractDetails::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ContractDetails>(), &ContractDetails::ByteSizeLong,
            &ContractDetails::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_._cached_size_),
        false,
    },
    &ContractDetails::kDescriptorMethods,
    &descriptor_table_ContractDetails_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ContractDetails::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 58, 2, 663, 9> ContractDetails::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_._has_bits_),
    0, // no _extensions_
    58, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    58,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf::ContractDetails>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string marketName = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.marketname_)}},
    // optional string minTick = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.mintick_)}},
    // optional string orderTypes = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.ordertypes_)}},
    // optional string validExchanges = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.validexchanges_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string longName = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 4, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.longname_)}},
    // optional string contractMonth = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 5, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.contractmonth_)}},
    // optional string industry = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 6, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.industry_)}},
    // optional string category = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 7, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.category_)}},
    // optional string subcategory = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 8, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.subcategory_)}},
    // optional string timeZoneId = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 9, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.timezoneid_)}},
    // optional string tradingHours = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 10, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.tradinghours_)}},
    // optional string liquidHours = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 11, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.liquidhours_)}},
    // optional string evRule = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 12, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.evrule_)}},
    // optional string fundBackLoadTimeInterval = 32;
    {::_pbi::TcParser::FastUS2,
     {642, 26, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundbackloadtimeinterval_)}},
    // optional string fundManagementFee = 33;
    {::_pbi::TcParser::FastUS2,
     {650, 27, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundmanagementfee_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string underSymbol = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 13, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.undersymbol_)}},
    // optional string underSecType = 20;
    {::_pbi::TcParser::FastUS2,
     {418, 14, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.undersectype_)}},
    // optional string marketRuleIds = 21;
    {::_pbi::TcParser::FastUS2,
     {426, 15, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.marketruleids_)}},
    // optional string realExpirationDate = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 16, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.realexpirationdate_)}},
    // optional string stockType = 23;
    {::_pbi::TcParser::FastUS2,
     {442, 17, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.stocktype_)}},
    // optional string minSize = 24;
    {::_pbi::TcParser::FastUS2,
     {450, 18, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.minsize_)}},
    // optional string sizeIncrement = 25;
    {::_pbi::TcParser::FastUS2,
     {458, 19, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.sizeincrement_)}},
    // optional string suggestedSizeIncrement = 26;
    {::_pbi::TcParser::FastUS2,
     {466, 20, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.suggestedsizeincrement_)}},
    // optional string fundName = 27;
    {::_pbi::TcParser::FastUS2,
     {474, 21, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundname_)}},
    // optional string fundFamily = 28;
    {::_pbi::TcParser::FastUS2,
     {482, 22, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundfamily_)}},
    // optional string fundType = 29;
    {::_pbi::TcParser::FastUS2,
     {490, 23, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundtype_)}},
    // optional string fundFrontLoad = 30;
    {::_pbi::TcParser::FastUS2,
     {498, 24, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundfrontload_)}},
    // optional string fundBackLoad = 31;
    {::_pbi::TcParser::FastUS2,
     {506, 25, 0, PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundbackload_)}},
  }}, {{
    33, 0, 2,
    0, 32, 64512, 48,
    65535, 65535
  }}, {{
    // optional string marketName = 1;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.marketname_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string minTick = 2;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.mintick_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string orderTypes = 3;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.ordertypes_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string validExchanges = 4;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.validexchanges_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 priceMagnifier = 5;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.pricemagnifier_), _Internal::kHasBitsOffset + 44, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 underConId = 6;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.underconid_), _Internal::kHasBitsOffset + 45, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string longName = 7;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.longname_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string contractMonth = 8;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.contractmonth_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string industry = 9;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.industry_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string category = 10;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.category_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string subcategory = 11;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.subcategory_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string timeZoneId = 12;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.timezoneid_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string tradingHours = 13;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.tradinghours_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string liquidHours = 14;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.liquidhours_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string evRule = 15;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.evrule_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double evMultiplier = 16;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.evmultiplier_), _Internal::kHasBitsOffset + 46, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // map<string, string> secIdList = 17;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.secidlist_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // optional int32 aggGroup = 18;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.agggroup_), _Internal::kHasBitsOffset + 47, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string underSymbol = 19;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.undersymbol_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string underSecType = 20;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.undersectype_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string marketRuleIds = 21;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.marketruleids_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string realExpirationDate = 22;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.realexpirationdate_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string stockType = 23;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.stocktype_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string minSize = 24;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.minsize_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string sizeIncrement = 25;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.sizeincrement_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string suggestedSizeIncrement = 26;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.suggestedsizeincrement_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundName = 27;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundname_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundFamily = 28;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundfamily_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundType = 29;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundtype_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundFrontLoad = 30;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundfrontload_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundBackLoad = 31;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundbackload_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundBackLoadTimeInterval = 32;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundbackloadtimeinterval_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundManagementFee = 33;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundmanagementfee_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool fundClosed = 34;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundclosed_), _Internal::kHasBitsOffset + 48, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool fundClosedForNewInvestors = 35;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundclosedfornewinvestors_), _Internal::kHasBitsOffset + 49, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool fundClosedForNewMoney = 36;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundclosedfornewmoney_), _Internal::kHasBitsOffset + 50, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string fundNotifyAmount = 37;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundnotifyamount_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundMinimumInitialPurchase = 38;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundminimuminitialpurchase_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundMinimumSubsequentPurchase = 39;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundminimumsubsequentpurchase_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundBlueSkyStates = 40;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundblueskystates_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundBlueSkyTerritories = 41;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundblueskyterritories_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundDistributionPolicyIndicator = 42;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.funddistributionpolicyindicator_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string fundAssetType = 43;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.fundassettype_), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string cusip = 44;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.cusip_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string issueDate = 45;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.issuedate_), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string ratings = 46;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.ratings_), _Internal::kHasBitsOffset + 37, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string bondType = 47;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.bondtype_), _Internal::kHasBitsOffset + 38, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double coupon = 48;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.coupon_), _Internal::kHasBitsOffset + 52, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string couponType = 49;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.coupontype_), _Internal::kHasBitsOffset + 39, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool convertible = 50;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.convertible_), _Internal::kHasBitsOffset + 51, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool callable = 51;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.callable_), _Internal::kHasBitsOffset + 53, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool puttable = 52;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.puttable_), _Internal::kHasBitsOffset + 54, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string descAppend = 53;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.descappend_), _Internal::kHasBitsOffset + 40, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string nextOptionDate = 54;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.nextoptiondate_), _Internal::kHasBitsOffset + 41, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string nextOptionType = 55;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.nextoptiontype_), _Internal::kHasBitsOffset + 42, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool nextOptionPartial = 56;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.nextoptionpartial_), _Internal::kHasBitsOffset + 55, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string bondNotes = 57;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.bondnotes_), _Internal::kHasBitsOffset + 43, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .protobuf.IneligibilityReason ineligibilityReasonList = 58;
    {PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.ineligibilityreasonlist_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::IneligibilityReason>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ContractDetails()._impl_.secidlist_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\30\12\7\12\16\0\0\10\15\10\10\13\12\14\13\6\0\11\0\13\14\15\22\11\7\15\26\10\12\10\15\14\30\21\0\0\0\20\32\35\21\26\37\15\5\11\7\10\0\12\0\0\0\12\16\16\0\11\0\0\0\0\0\0"
    "protobuf.ContractDetails"
    "marketName"
    "minTick"
    "orderTypes"
    "validExchanges"
    "longName"
    "contractMonth"
    "industry"
    "category"
    "subcategory"
    "timeZoneId"
    "tradingHours"
    "liquidHours"
    "evRule"
    "secIdList"
    "underSymbol"
    "underSecType"
    "marketRuleIds"
    "realExpirationDate"
    "stockType"
    "minSize"
    "sizeIncrement"
    "suggestedSizeIncrement"
    "fundName"
    "fundFamily"
    "fundType"
    "fundFrontLoad"
    "fundBackLoad"
    "fundBackLoadTimeInterval"
    "fundManagementFee"
    "fundNotifyAmount"
    "fundMinimumInitialPurchase"
    "fundMinimumSubsequentPurchase"
    "fundBlueSkyStates"
    "fundBlueSkyTerritories"
    "fundDistributionPolicyIndicator"
    "fundAssetType"
    "cusip"
    "issueDate"
    "ratings"
    "bondType"
    "couponType"
    "descAppend"
    "nextOptionDate"
    "nextOptionType"
    "bondNotes"
  }},
};

PROTOBUF_NOINLINE void ContractDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.ContractDetails)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.secidlist_.Clear();
  _impl_.ineligibilityreasonlist_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.marketname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mintick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ordertypes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.validexchanges_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.longname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.contractmonth_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.industry_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.category_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.subcategory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.timezoneid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.tradinghours_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.liquidhours_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.evrule_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.undersymbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.undersectype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.marketruleids_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.realexpirationdate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.stocktype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.minsize_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.sizeincrement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.suggestedsizeincrement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.fundname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.fundfamily_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.fundtype_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.fundfrontload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.fundbackload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.fundbackloadtimeinterval_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.fundmanagementfee_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.fundnotifyamount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.fundminimuminitialpurchase_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.fundminimumsubsequentpurchase_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x80000000u) {
      _impl_.fundblueskystates_.ClearNonDefaultToEmpty();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.fundblueskyterritories_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.funddistributionpolicyindicator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fundassettype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.cusip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.issuedate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.ratings_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.bondtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.coupontype_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.descappend_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.nextoptiondate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.nextoptiontype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.bondnotes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&_impl_.pricemagnifier_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.agggroup_) -
        reinterpret_cast<char*>(&_impl_.pricemagnifier_)) + sizeof(_impl_.agggroup_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.fundclosed_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nextoptionpartial_) -
        reinterpret_cast<char*>(&_impl_.fundclosed_)) + sizeof(_impl_.nextoptionpartial_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ContractDetails::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ContractDetails& this_ = static_cast<const ContractDetails&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ContractDetails::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ContractDetails& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf.ContractDetails)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string marketName = 1;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_marketname();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.marketName");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // optional string minTick = 2;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_mintick();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.minTick");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // optional string orderTypes = 3;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_ordertypes();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.orderTypes");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // optional string validExchanges = 4;
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_validexchanges();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.validExchanges");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional int32 priceMagnifier = 5;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_pricemagnifier(), target);
          }

          // optional int32 underConId = 6;
          if (cached_has_bits & 0x00002000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_underconid(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string longName = 7;
          if (cached_has_bits & 0x00000010u) {
            const std::string& _s = this_._internal_longname();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.longName");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // optional string contractMonth = 8;
          if (cached_has_bits & 0x00000020u) {
            const std::string& _s = this_._internal_contractmonth();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.contractMonth");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // optional string industry = 9;
          if (cached_has_bits & 0x00000040u) {
            const std::string& _s = this_._internal_industry();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.industry");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // optional string category = 10;
          if (cached_has_bits & 0x00000080u) {
            const std::string& _s = this_._internal_category();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.category");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // optional string subcategory = 11;
          if (cached_has_bits & 0x00000100u) {
            const std::string& _s = this_._internal_subcategory();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.subcategory");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // optional string timeZoneId = 12;
          if (cached_has_bits & 0x00000200u) {
            const std::string& _s = this_._internal_timezoneid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.timeZoneId");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // optional string tradingHours = 13;
          if (cached_has_bits & 0x00000400u) {
            const std::string& _s = this_._internal_tradinghours();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.tradingHours");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // optional string liquidHours = 14;
          if (cached_has_bits & 0x00000800u) {
            const std::string& _s = this_._internal_liquidhours();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.liquidHours");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // optional string evRule = 15;
          if (cached_has_bits & 0x00001000u) {
            const std::string& _s = this_._internal_evrule();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.evRule");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional double evMultiplier = 16;
          if (cached_has_bits & 0x00004000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                16, this_._internal_evmultiplier(), target);
          }

          // map<string, string> secIdList = 17;
          if (!this_._internal_secidlist().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_secidlist();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    17, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.secIdList");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.secIdList");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    17, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.secIdList");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.secIdList");
              }
            }
          }

          // optional int32 aggGroup = 18;
          if (cached_has_bits & 0x00008000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                18, this_._internal_agggroup(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string underSymbol = 19;
          if (cached_has_bits & 0x00002000u) {
            const std::string& _s = this_._internal_undersymbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.underSymbol");
            target = stream->WriteStringMaybeAliased(19, _s, target);
          }

          // optional string underSecType = 20;
          if (cached_has_bits & 0x00004000u) {
            const std::string& _s = this_._internal_undersectype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.underSecType");
            target = stream->WriteStringMaybeAliased(20, _s, target);
          }

          // optional string marketRuleIds = 21;
          if (cached_has_bits & 0x00008000u) {
            const std::string& _s = this_._internal_marketruleids();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.marketRuleIds");
            target = stream->WriteStringMaybeAliased(21, _s, target);
          }

          // optional string realExpirationDate = 22;
          if (cached_has_bits & 0x00010000u) {
            const std::string& _s = this_._internal_realexpirationdate();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.realExpirationDate");
            target = stream->WriteStringMaybeAliased(22, _s, target);
          }

          // optional string stockType = 23;
          if (cached_has_bits & 0x00020000u) {
            const std::string& _s = this_._internal_stocktype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.stockType");
            target = stream->WriteStringMaybeAliased(23, _s, target);
          }

          // optional string minSize = 24;
          if (cached_has_bits & 0x00040000u) {
            const std::string& _s = this_._internal_minsize();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.minSize");
            target = stream->WriteStringMaybeAliased(24, _s, target);
          }

          // optional string sizeIncrement = 25;
          if (cached_has_bits & 0x00080000u) {
            const std::string& _s = this_._internal_sizeincrement();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.sizeIncrement");
            target = stream->WriteStringMaybeAliased(25, _s, target);
          }

          // optional string suggestedSizeIncrement = 26;
          if (cached_has_bits & 0x00100000u) {
            const std::string& _s = this_._internal_suggestedsizeincrement();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.suggestedSizeIncrement");
            target = stream->WriteStringMaybeAliased(26, _s, target);
          }

          // optional string fundName = 27;
          if (cached_has_bits & 0x00200000u) {
            const std::string& _s = this_._internal_fundname();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundName");
            target = stream->WriteStringMaybeAliased(27, _s, target);
          }

          // optional string fundFamily = 28;
          if (cached_has_bits & 0x00400000u) {
            const std::string& _s = this_._internal_fundfamily();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundFamily");
            target = stream->WriteStringMaybeAliased(28, _s, target);
          }

          // optional string fundType = 29;
          if (cached_has_bits & 0x00800000u) {
            const std::string& _s = this_._internal_fundtype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundType");
            target = stream->WriteStringMaybeAliased(29, _s, target);
          }

          // optional string fundFrontLoad = 30;
          if (cached_has_bits & 0x01000000u) {
            const std::string& _s = this_._internal_fundfrontload();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundFrontLoad");
            target = stream->WriteStringMaybeAliased(30, _s, target);
          }

          // optional string fundBackLoad = 31;
          if (cached_has_bits & 0x02000000u) {
            const std::string& _s = this_._internal_fundbackload();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundBackLoad");
            target = stream->WriteStringMaybeAliased(31, _s, target);
          }

          // optional string fundBackLoadTimeInterval = 32;
          if (cached_has_bits & 0x04000000u) {
            const std::string& _s = this_._internal_fundbackloadtimeinterval();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundBackLoadTimeInterval");
            target = stream->WriteStringMaybeAliased(32, _s, target);
          }

          // optional string fundManagementFee = 33;
          if (cached_has_bits & 0x08000000u) {
            const std::string& _s = this_._internal_fundmanagementfee();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundManagementFee");
            target = stream->WriteStringMaybeAliased(33, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional bool fundClosed = 34;
          if (cached_has_bits & 0x00010000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                34, this_._internal_fundclosed(), target);
          }

          // optional bool fundClosedForNewInvestors = 35;
          if (cached_has_bits & 0x00020000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                35, this_._internal_fundclosedfornewinvestors(), target);
          }

          // optional bool fundClosedForNewMoney = 36;
          if (cached_has_bits & 0x00040000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                36, this_._internal_fundclosedfornewmoney(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string fundNotifyAmount = 37;
          if (cached_has_bits & 0x10000000u) {
            const std::string& _s = this_._internal_fundnotifyamount();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundNotifyAmount");
            target = stream->WriteStringMaybeAliased(37, _s, target);
          }

          // optional string fundMinimumInitialPurchase = 38;
          if (cached_has_bits & 0x20000000u) {
            const std::string& _s = this_._internal_fundminimuminitialpurchase();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundMinimumInitialPurchase");
            target = stream->WriteStringMaybeAliased(38, _s, target);
          }

          // optional string fundMinimumSubsequentPurchase = 39;
          if (cached_has_bits & 0x40000000u) {
            const std::string& _s = this_._internal_fundminimumsubsequentpurchase();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundMinimumSubsequentPurchase");
            target = stream->WriteStringMaybeAliased(39, _s, target);
          }

          // optional string fundBlueSkyStates = 40;
          if (cached_has_bits & 0x80000000u) {
            const std::string& _s = this_._internal_fundblueskystates();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundBlueSkyStates");
            target = stream->WriteStringMaybeAliased(40, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional string fundBlueSkyTerritories = 41;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_fundblueskyterritories();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundBlueSkyTerritories");
            target = stream->WriteStringMaybeAliased(41, _s, target);
          }

          // optional string fundDistributionPolicyIndicator = 42;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_funddistributionpolicyindicator();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundDistributionPolicyIndicator");
            target = stream->WriteStringMaybeAliased(42, _s, target);
          }

          // optional string fundAssetType = 43;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_fundassettype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.fundAssetType");
            target = stream->WriteStringMaybeAliased(43, _s, target);
          }

          // optional string cusip = 44;
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_cusip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.cusip");
            target = stream->WriteStringMaybeAliased(44, _s, target);
          }

          // optional string issueDate = 45;
          if (cached_has_bits & 0x00000010u) {
            const std::string& _s = this_._internal_issuedate();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.issueDate");
            target = stream->WriteStringMaybeAliased(45, _s, target);
          }

          // optional string ratings = 46;
          if (cached_has_bits & 0x00000020u) {
            const std::string& _s = this_._internal_ratings();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.ratings");
            target = stream->WriteStringMaybeAliased(46, _s, target);
          }

          // optional string bondType = 47;
          if (cached_has_bits & 0x00000040u) {
            const std::string& _s = this_._internal_bondtype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.bondType");
            target = stream->WriteStringMaybeAliased(47, _s, target);
          }

          // optional double coupon = 48;
          if (cached_has_bits & 0x00100000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                48, this_._internal_coupon(), target);
          }

          // optional string couponType = 49;
          if (cached_has_bits & 0x00000080u) {
            const std::string& _s = this_._internal_coupontype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.couponType");
            target = stream->WriteStringMaybeAliased(49, _s, target);
          }

          // optional bool convertible = 50;
          if (cached_has_bits & 0x00080000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                50, this_._internal_convertible(), target);
          }

          // optional bool callable = 51;
          if (cached_has_bits & 0x00200000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                51, this_._internal_callable(), target);
          }

          // optional bool puttable = 52;
          if (cached_has_bits & 0x00400000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                52, this_._internal_puttable(), target);
          }

          // optional string descAppend = 53;
          if (cached_has_bits & 0x00000100u) {
            const std::string& _s = this_._internal_descappend();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.descAppend");
            target = stream->WriteStringMaybeAliased(53, _s, target);
          }

          // optional string nextOptionDate = 54;
          if (cached_has_bits & 0x00000200u) {
            const std::string& _s = this_._internal_nextoptiondate();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.nextOptionDate");
            target = stream->WriteStringMaybeAliased(54, _s, target);
          }

          // optional string nextOptionType = 55;
          if (cached_has_bits & 0x00000400u) {
            const std::string& _s = this_._internal_nextoptiontype();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.nextOptionType");
            target = stream->WriteStringMaybeAliased(55, _s, target);
          }

          // optional bool nextOptionPartial = 56;
          if (cached_has_bits & 0x00800000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                56, this_._internal_nextoptionpartial(), target);
          }

          // optional string bondNotes = 57;
          if (cached_has_bits & 0x00000800u) {
            const std::string& _s = this_._internal_bondnotes();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.ContractDetails.bondNotes");
            target = stream->WriteStringMaybeAliased(57, _s, target);
          }

          // repeated .protobuf.IneligibilityReason ineligibilityReasonList = 58;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_ineligibilityreasonlist_size());
               i < n; i++) {
            const auto& repfield = this_._internal_ineligibilityreasonlist().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    58, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf.ContractDetails)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ContractDetails::ByteSizeLong(const MessageLite& base) {
          const ContractDetails& this_ = static_cast<const ContractDetails&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ContractDetails::ByteSizeLong() const {
          const ContractDetails& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf.ContractDetails)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> secIdList = 17;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_secidlist_size());
              for (const auto& entry : this_._internal_secidlist()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // repeated .protobuf.IneligibilityReason ineligibilityReasonList = 58;
            {
              total_size += 2UL * this_._internal_ineligibilityreasonlist_size();
              for (const auto& msg : this_._internal_ineligibilityreasonlist()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // optional string marketName = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_marketname());
            }
            // optional string minTick = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_mintick());
            }
            // optional string orderTypes = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ordertypes());
            }
            // optional string validExchanges = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_validexchanges());
            }
            // optional string longName = 7;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_longname());
            }
            // optional string contractMonth = 8;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_contractmonth());
            }
            // optional string industry = 9;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_industry());
            }
            // optional string category = 10;
            if (cached_has_bits & 0x00000080u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_category());
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional string subcategory = 11;
            if (cached_has_bits & 0x00000100u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_subcategory());
            }
            // optional string timeZoneId = 12;
            if (cached_has_bits & 0x00000200u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timezoneid());
            }
            // optional string tradingHours = 13;
            if (cached_has_bits & 0x00000400u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_tradinghours());
            }
            // optional string liquidHours = 14;
            if (cached_has_bits & 0x00000800u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_liquidhours());
            }
            // optional string evRule = 15;
            if (cached_has_bits & 0x00001000u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_evrule());
            }
            // optional string underSymbol = 19;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_undersymbol());
            }
            // optional string underSecType = 20;
            if (cached_has_bits & 0x00004000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_undersectype());
            }
            // optional string marketRuleIds = 21;
            if (cached_has_bits & 0x00008000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_marketruleids());
            }
          }
          if (cached_has_bits & 0x00ff0000u) {
            // optional string realExpirationDate = 22;
            if (cached_has_bits & 0x00010000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_realexpirationdate());
            }
            // optional string stockType = 23;
            if (cached_has_bits & 0x00020000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_stocktype());
            }
            // optional string minSize = 24;
            if (cached_has_bits & 0x00040000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_minsize());
            }
            // optional string sizeIncrement = 25;
            if (cached_has_bits & 0x00080000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sizeincrement());
            }
            // optional string suggestedSizeIncrement = 26;
            if (cached_has_bits & 0x00100000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_suggestedsizeincrement());
            }
            // optional string fundName = 27;
            if (cached_has_bits & 0x00200000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundname());
            }
            // optional string fundFamily = 28;
            if (cached_has_bits & 0x00400000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundfamily());
            }
            // optional string fundType = 29;
            if (cached_has_bits & 0x00800000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundtype());
            }
          }
          if (cached_has_bits & 0xff000000u) {
            // optional string fundFrontLoad = 30;
            if (cached_has_bits & 0x01000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundfrontload());
            }
            // optional string fundBackLoad = 31;
            if (cached_has_bits & 0x02000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundbackload());
            }
            // optional string fundBackLoadTimeInterval = 32;
            if (cached_has_bits & 0x04000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundbackloadtimeinterval());
            }
            // optional string fundManagementFee = 33;
            if (cached_has_bits & 0x08000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundmanagementfee());
            }
            // optional string fundNotifyAmount = 37;
            if (cached_has_bits & 0x10000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundnotifyamount());
            }
            // optional string fundMinimumInitialPurchase = 38;
            if (cached_has_bits & 0x20000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundminimuminitialpurchase());
            }
            // optional string fundMinimumSubsequentPurchase = 39;
            if (cached_has_bits & 0x40000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundminimumsubsequentpurchase());
            }
            // optional string fundBlueSkyStates = 40;
            if (cached_has_bits & 0x80000000u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundblueskystates());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[1];
          if (cached_has_bits & 0x000000ffu) {
            // optional string fundBlueSkyTerritories = 41;
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundblueskyterritories());
            }
            // optional string fundDistributionPolicyIndicator = 42;
            if (cached_has_bits & 0x00000002u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_funddistributionpolicyindicator());
            }
            // optional string fundAssetType = 43;
            if (cached_has_bits & 0x00000004u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fundassettype());
            }
            // optional string cusip = 44;
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_cusip());
            }
            // optional string issueDate = 45;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_issuedate());
            }
            // optional string ratings = 46;
            if (cached_has_bits & 0x00000020u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ratings());
            }
            // optional string bondType = 47;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_bondtype());
            }
            // optional string couponType = 49;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_coupontype());
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional string descAppend = 53;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_descappend());
            }
            // optional string nextOptionDate = 54;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_nextoptiondate());
            }
            // optional string nextOptionType = 55;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_nextoptiontype());
            }
            // optional string bondNotes = 57;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_bondnotes());
            }
            // optional int32 priceMagnifier = 5;
            if (cached_has_bits & 0x00001000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_pricemagnifier());
            }
            // optional int32 underConId = 6;
            if (cached_has_bits & 0x00002000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_underconid());
            }
            // optional double evMultiplier = 16;
            if (cached_has_bits & 0x00004000u) {
              total_size += 10;
            }
            // optional int32 aggGroup = 18;
            if (cached_has_bits & 0x00008000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_agggroup());
            }
          }
          if (cached_has_bits & 0x00ff0000u) {
            // optional bool fundClosed = 34;
            if (cached_has_bits & 0x00010000u) {
              total_size += 3;
            }
            // optional bool fundClosedForNewInvestors = 35;
            if (cached_has_bits & 0x00020000u) {
              total_size += 3;
            }
            // optional bool fundClosedForNewMoney = 36;
            if (cached_has_bits & 0x00040000u) {
              total_size += 3;
            }
            // optional bool convertible = 50;
            if (cached_has_bits & 0x00080000u) {
              total_size += 3;
            }
            // optional double coupon = 48;
            if (cached_has_bits & 0x00100000u) {
              total_size += 10;
            }
            // optional bool callable = 51;
            if (cached_has_bits & 0x00200000u) {
              total_size += 3;
            }
            // optional bool puttable = 52;
            if (cached_has_bits & 0x00400000u) {
              total_size += 3;
            }
            // optional bool nextOptionPartial = 56;
            if (cached_has_bits & 0x00800000u) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ContractDetails::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ContractDetails*>(&to_msg);
  auto& from = static_cast<const ContractDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.ContractDetails)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.secidlist_.MergeFrom(from._impl_.secidlist_);
  _this->_internal_mutable_ineligibilityreasonlist()->MergeFrom(
      from._internal_ineligibilityreasonlist());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_marketname(from._internal_marketname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mintick(from._internal_mintick());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ordertypes(from._internal_ordertypes());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_validexchanges(from._internal_validexchanges());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_longname(from._internal_longname());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_contractmonth(from._internal_contractmonth());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_industry(from._internal_industry());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_category(from._internal_category());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_subcategory(from._internal_subcategory());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_timezoneid(from._internal_timezoneid());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_tradinghours(from._internal_tradinghours());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_liquidhours(from._internal_liquidhours());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_evrule(from._internal_evrule());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_undersymbol(from._internal_undersymbol());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_set_undersectype(from._internal_undersectype());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_set_marketruleids(from._internal_marketruleids());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_set_realexpirationdate(from._internal_realexpirationdate());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_set_stocktype(from._internal_stocktype());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_set_minsize(from._internal_minsize());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_set_sizeincrement(from._internal_sizeincrement());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_set_suggestedsizeincrement(from._internal_suggestedsizeincrement());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_set_fundname(from._internal_fundname());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_set_fundfamily(from._internal_fundfamily());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_set_fundtype(from._internal_fundtype());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_set_fundfrontload(from._internal_fundfrontload());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_set_fundbackload(from._internal_fundbackload());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_set_fundbackloadtimeinterval(from._internal_fundbackloadtimeinterval());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_set_fundmanagementfee(from._internal_fundmanagementfee());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_set_fundnotifyamount(from._internal_fundnotifyamount());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_set_fundminimuminitialpurchase(from._internal_fundminimuminitialpurchase());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_set_fundminimumsubsequentpurchase(from._internal_fundminimumsubsequentpurchase());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_set_fundblueskystates(from._internal_fundblueskystates());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_fundblueskyterritories(from._internal_fundblueskyterritories());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_funddistributionpolicyindicator(from._internal_funddistributionpolicyindicator());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_fundassettype(from._internal_fundassettype());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_cusip(from._internal_cusip());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_issuedate(from._internal_issuedate());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_ratings(from._internal_ratings());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_bondtype(from._internal_bondtype());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_coupontype(from._internal_coupontype());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_descappend(from._internal_descappend());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_nextoptiondate(from._internal_nextoptiondate());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_nextoptiontype(from._internal_nextoptiontype());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_bondnotes(from._internal_bondnotes());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.pricemagnifier_ = from._impl_.pricemagnifier_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.underconid_ = from._impl_.underconid_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.evmultiplier_ = from._impl_.evmultiplier_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.agggroup_ = from._impl_.agggroup_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.fundclosed_ = from._impl_.fundclosed_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.fundclosedfornewinvestors_ = from._impl_.fundclosedfornewinvestors_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.fundclosedfornewmoney_ = from._impl_.fundclosedfornewmoney_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.convertible_ = from._impl_.convertible_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.coupon_ = from._impl_.coupon_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.callable_ = from._impl_.callable_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.puttable_ = from._impl_.puttable_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.nextoptionpartial_ = from._impl_.nextoptionpartial_;
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ContractDetails::CopyFrom(const ContractDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.ContractDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ContractDetails::InternalSwap(ContractDetails* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.secidlist_.InternalSwap(&other->_impl_.secidlist_);
  _impl_.ineligibilityreasonlist_.InternalSwap(&other->_impl_.ineligibilityreasonlist_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.marketname_, &other->_impl_.marketname_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mintick_, &other->_impl_.mintick_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ordertypes_, &other->_impl_.ordertypes_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validexchanges_, &other->_impl_.validexchanges_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.longname_, &other->_impl_.longname_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contractmonth_, &other->_impl_.contractmonth_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.industry_, &other->_impl_.industry_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.category_, &other->_impl_.category_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subcategory_, &other->_impl_.subcategory_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timezoneid_, &other->_impl_.timezoneid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tradinghours_, &other->_impl_.tradinghours_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.liquidhours_, &other->_impl_.liquidhours_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.evrule_, &other->_impl_.evrule_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.undersymbol_, &other->_impl_.undersymbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.undersectype_, &other->_impl_.undersectype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.marketruleids_, &other->_impl_.marketruleids_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.realexpirationdate_, &other->_impl_.realexpirationdate_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stocktype_, &other->_impl_.stocktype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.minsize_, &other->_impl_.minsize_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sizeincrement_, &other->_impl_.sizeincrement_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.suggestedsizeincrement_, &other->_impl_.suggestedsizeincrement_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundname_, &other->_impl_.fundname_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundfamily_, &other->_impl_.fundfamily_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundtype_, &other->_impl_.fundtype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundfrontload_, &other->_impl_.fundfrontload_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundbackload_, &other->_impl_.fundbackload_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundbackloadtimeinterval_, &other->_impl_.fundbackloadtimeinterval_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundmanagementfee_, &other->_impl_.fundmanagementfee_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundnotifyamount_, &other->_impl_.fundnotifyamount_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundminimuminitialpurchase_, &other->_impl_.fundminimuminitialpurchase_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundminimumsubsequentpurchase_, &other->_impl_.fundminimumsubsequentpurchase_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundblueskystates_, &other->_impl_.fundblueskystates_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundblueskyterritories_, &other->_impl_.fundblueskyterritories_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.funddistributionpolicyindicator_, &other->_impl_.funddistributionpolicyindicator_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fundassettype_, &other->_impl_.fundassettype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cusip_, &other->_impl_.cusip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issuedate_, &other->_impl_.issuedate_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ratings_, &other->_impl_.ratings_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bondtype_, &other->_impl_.bondtype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.coupontype_, &other->_impl_.coupontype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.descappend_, &other->_impl_.descappend_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nextoptiondate_, &other->_impl_.nextoptiondate_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nextoptiontype_, &other->_impl_.nextoptiontype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bondnotes_, &other->_impl_.bondnotes_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.nextoptionpartial_)
      + sizeof(ContractDetails::_impl_.nextoptionpartial_)
      - PROTOBUF_FIELD_OFFSET(ContractDetails, _impl_.pricemagnifier_)>(
          reinterpret_cast<char*>(&_impl_.pricemagnifier_),
          reinterpret_cast<char*>(&other->_impl_.pricemagnifier_));
}

::google::protobuf::Metadata ContractDetails::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_ContractDetails_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
